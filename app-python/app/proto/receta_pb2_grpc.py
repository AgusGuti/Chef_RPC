# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import receta_pb2 as receta__pb2


class RecetasServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.AddReceta = channel.unary_unary(
                '/model.RecetasService/AddReceta',
                request_serializer=receta__pb2.Receta.SerializeToString,
                response_deserializer=receta__pb2.RecetaResponse.FromString,
                )
        self.getByFilter = channel.unary_unary(
                '/model.RecetasService/getByFilter',
                request_serializer=receta__pb2.RecetaFiltro.SerializeToString,
                response_deserializer=receta__pb2.RecetasResponse.FromString,
                )
        self.getAllRecetas = channel.unary_unary(
                '/model.RecetasService/getAllRecetas',
                request_serializer=receta__pb2.Empty.SerializeToString,
                response_deserializer=receta__pb2.RecetasResponse.FromString,
                )
        self.getAllRecetasByUser = channel.unary_unary(
                '/model.RecetasService/getAllRecetasByUser',
                request_serializer=receta__pb2.UsuarioId.SerializeToString,
                response_deserializer=receta__pb2.RecetasResponse.FromString,
                )
        self.updateReceta = channel.unary_unary(
                '/model.RecetasService/updateReceta',
                request_serializer=receta__pb2.RecetaId.SerializeToString,
                response_deserializer=receta__pb2.RecetaResponse.FromString,
                )


class RecetasServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def AddReceta(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getByFilter(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getAllRecetas(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getAllRecetasByUser(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def updateReceta(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_RecetasServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'AddReceta': grpc.unary_unary_rpc_method_handler(
                    servicer.AddReceta,
                    request_deserializer=receta__pb2.Receta.FromString,
                    response_serializer=receta__pb2.RecetaResponse.SerializeToString,
            ),
            'getByFilter': grpc.unary_unary_rpc_method_handler(
                    servicer.getByFilter,
                    request_deserializer=receta__pb2.RecetaFiltro.FromString,
                    response_serializer=receta__pb2.RecetasResponse.SerializeToString,
            ),
            'getAllRecetas': grpc.unary_unary_rpc_method_handler(
                    servicer.getAllRecetas,
                    request_deserializer=receta__pb2.Empty.FromString,
                    response_serializer=receta__pb2.RecetasResponse.SerializeToString,
            ),
            'getAllRecetasByUser': grpc.unary_unary_rpc_method_handler(
                    servicer.getAllRecetasByUser,
                    request_deserializer=receta__pb2.UsuarioId.FromString,
                    response_serializer=receta__pb2.RecetasResponse.SerializeToString,
            ),
            'updateReceta': grpc.unary_unary_rpc_method_handler(
                    servicer.updateReceta,
                    request_deserializer=receta__pb2.RecetaId.FromString,
                    response_serializer=receta__pb2.RecetaResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'model.RecetasService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class RecetasService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def AddReceta(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/model.RecetasService/AddReceta',
            receta__pb2.Receta.SerializeToString,
            receta__pb2.RecetaResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getByFilter(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/model.RecetasService/getByFilter',
            receta__pb2.RecetaFiltro.SerializeToString,
            receta__pb2.RecetasResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getAllRecetas(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/model.RecetasService/getAllRecetas',
            receta__pb2.Empty.SerializeToString,
            receta__pb2.RecetasResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getAllRecetasByUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/model.RecetasService/getAllRecetasByUser',
            receta__pb2.UsuarioId.SerializeToString,
            receta__pb2.RecetasResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def updateReceta(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/model.RecetasService/updateReceta',
            receta__pb2.RecetaId.SerializeToString,
            receta__pb2.RecetaResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
